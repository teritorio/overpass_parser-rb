
// Generated from ./Overpass.g4 by ANTLR 4.10.1


#include "OverpassLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct OverpassLexerStaticData final {
  OverpassLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  OverpassLexerStaticData(const OverpassLexerStaticData&) = delete;
  OverpassLexerStaticData(OverpassLexerStaticData&&) = delete;
  OverpassLexerStaticData& operator=(const OverpassLexerStaticData&) = delete;
  OverpassLexerStaticData& operator=(OverpassLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag overpasslexerLexerOnceFlag;
OverpassLexerStaticData *overpasslexerLexerStaticData = nullptr;

void overpasslexerLexerInitialize() {
  assert(overpasslexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<OverpassLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "WS", "SL_COMMENT", "ML_COMMENT", 
      "INTEGER", "FLOAT", "OPERATOR", "NOT", "UNQUOTED_STRING", "SIMPLE_QUOTED_STRING", 
      "DOUBLE_QUOTED_STRING", "ID", "DOT_ID"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "'out:json'", "']'", "'timeout:'", "','", "'id:'", "'area'", 
      "'around'", "':'", "'('", "')'", "'->'", "'node'", "'way'", "'relation'", 
      "'nwr'", "'<'", "'<<'", "'>'", "'>>'", "';'", "'geom'", "'center'", 
      "'bb'", "'ids'", "'skel'", "'body'", "'tags'", "'meta'", "'out'", 
      "", "", "", "", "", "", "'!'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "WS", "SL_COMMENT", 
      "ML_COMMENT", "INTEGER", "FLOAT", "OPERATOR", "NOT", "UNQUOTED_STRING", 
      "SIMPLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", "ID", "DOT_ID"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,42,305,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,
  	1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
  	12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,
  	19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
  	22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
  	26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
  	28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,220,
  	8,31,10,31,12,31,223,9,31,1,31,3,31,226,8,31,1,31,1,31,1,31,1,31,1,32,
  	1,32,1,32,1,32,5,32,236,8,32,10,32,12,32,239,9,32,1,32,1,32,1,32,1,32,
  	1,32,1,33,4,33,247,8,33,11,33,12,33,248,1,34,1,34,1,34,1,34,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,265,8,35,1,36,1,36,1,37,
  	4,37,270,8,37,11,37,12,37,271,1,38,1,38,1,38,1,38,5,38,278,8,38,10,38,
  	12,38,281,9,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,289,8,39,10,39,12,39,
  	292,9,39,1,39,1,39,1,40,1,40,5,40,298,8,40,10,40,12,40,301,9,40,1,41,
  	1,41,1,41,2,221,237,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,6,3,0,9,10,
  	12,13,32,32,1,0,48,57,5,0,45,45,48,57,65,90,95,95,97,122,1,0,39,39,1,
  	0,34,34,3,0,65,90,95,95,97,122,319,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
  	0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
  	1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
  	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
  	0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
  	1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
  	0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
  	0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
  	1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,96,1,0,0,0,7,98,1,0,
  	0,0,9,107,1,0,0,0,11,109,1,0,0,0,13,113,1,0,0,0,15,118,1,0,0,0,17,125,
  	1,0,0,0,19,127,1,0,0,0,21,129,1,0,0,0,23,131,1,0,0,0,25,134,1,0,0,0,27,
  	139,1,0,0,0,29,143,1,0,0,0,31,152,1,0,0,0,33,156,1,0,0,0,35,158,1,0,0,
  	0,37,161,1,0,0,0,39,163,1,0,0,0,41,166,1,0,0,0,43,168,1,0,0,0,45,173,
  	1,0,0,0,47,180,1,0,0,0,49,183,1,0,0,0,51,187,1,0,0,0,53,192,1,0,0,0,55,
  	197,1,0,0,0,57,202,1,0,0,0,59,207,1,0,0,0,61,211,1,0,0,0,63,215,1,0,0,
  	0,65,231,1,0,0,0,67,246,1,0,0,0,69,250,1,0,0,0,71,264,1,0,0,0,73,266,
  	1,0,0,0,75,269,1,0,0,0,77,273,1,0,0,0,79,284,1,0,0,0,81,295,1,0,0,0,83,
  	302,1,0,0,0,85,86,5,91,0,0,86,2,1,0,0,0,87,88,5,111,0,0,88,89,5,117,0,
  	0,89,90,5,116,0,0,90,91,5,58,0,0,91,92,5,106,0,0,92,93,5,115,0,0,93,94,
  	5,111,0,0,94,95,5,110,0,0,95,4,1,0,0,0,96,97,5,93,0,0,97,6,1,0,0,0,98,
  	99,5,116,0,0,99,100,5,105,0,0,100,101,5,109,0,0,101,102,5,101,0,0,102,
  	103,5,111,0,0,103,104,5,117,0,0,104,105,5,116,0,0,105,106,5,58,0,0,106,
  	8,1,0,0,0,107,108,5,44,0,0,108,10,1,0,0,0,109,110,5,105,0,0,110,111,5,
  	100,0,0,111,112,5,58,0,0,112,12,1,0,0,0,113,114,5,97,0,0,114,115,5,114,
  	0,0,115,116,5,101,0,0,116,117,5,97,0,0,117,14,1,0,0,0,118,119,5,97,0,
  	0,119,120,5,114,0,0,120,121,5,111,0,0,121,122,5,117,0,0,122,123,5,110,
  	0,0,123,124,5,100,0,0,124,16,1,0,0,0,125,126,5,58,0,0,126,18,1,0,0,0,
  	127,128,5,40,0,0,128,20,1,0,0,0,129,130,5,41,0,0,130,22,1,0,0,0,131,132,
  	5,45,0,0,132,133,5,62,0,0,133,24,1,0,0,0,134,135,5,110,0,0,135,136,5,
  	111,0,0,136,137,5,100,0,0,137,138,5,101,0,0,138,26,1,0,0,0,139,140,5,
  	119,0,0,140,141,5,97,0,0,141,142,5,121,0,0,142,28,1,0,0,0,143,144,5,114,
  	0,0,144,145,5,101,0,0,145,146,5,108,0,0,146,147,5,97,0,0,147,148,5,116,
  	0,0,148,149,5,105,0,0,149,150,5,111,0,0,150,151,5,110,0,0,151,30,1,0,
  	0,0,152,153,5,110,0,0,153,154,5,119,0,0,154,155,5,114,0,0,155,32,1,0,
  	0,0,156,157,5,60,0,0,157,34,1,0,0,0,158,159,5,60,0,0,159,160,5,60,0,0,
  	160,36,1,0,0,0,161,162,5,62,0,0,162,38,1,0,0,0,163,164,5,62,0,0,164,165,
  	5,62,0,0,165,40,1,0,0,0,166,167,5,59,0,0,167,42,1,0,0,0,168,169,5,103,
  	0,0,169,170,5,101,0,0,170,171,5,111,0,0,171,172,5,109,0,0,172,44,1,0,
  	0,0,173,174,5,99,0,0,174,175,5,101,0,0,175,176,5,110,0,0,176,177,5,116,
  	0,0,177,178,5,101,0,0,178,179,5,114,0,0,179,46,1,0,0,0,180,181,5,98,0,
  	0,181,182,5,98,0,0,182,48,1,0,0,0,183,184,5,105,0,0,184,185,5,100,0,0,
  	185,186,5,115,0,0,186,50,1,0,0,0,187,188,5,115,0,0,188,189,5,107,0,0,
  	189,190,5,101,0,0,190,191,5,108,0,0,191,52,1,0,0,0,192,193,5,98,0,0,193,
  	194,5,111,0,0,194,195,5,100,0,0,195,196,5,121,0,0,196,54,1,0,0,0,197,
  	198,5,116,0,0,198,199,5,97,0,0,199,200,5,103,0,0,200,201,5,115,0,0,201,
  	56,1,0,0,0,202,203,5,109,0,0,203,204,5,101,0,0,204,205,5,116,0,0,205,
  	206,5,97,0,0,206,58,1,0,0,0,207,208,5,111,0,0,208,209,5,117,0,0,209,210,
  	5,116,0,0,210,60,1,0,0,0,211,212,7,0,0,0,212,213,1,0,0,0,213,214,6,30,
  	0,0,214,62,1,0,0,0,215,216,5,47,0,0,216,217,5,47,0,0,217,221,1,0,0,0,
  	218,220,9,0,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,222,1,0,0,0,221,219,
  	1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,224,226,5,13,0,0,225,224,1,0,
  	0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,5,10,0,0,228,229,1,0,0,0,
  	229,230,6,31,0,0,230,64,1,0,0,0,231,232,5,47,0,0,232,233,5,42,0,0,233,
  	237,1,0,0,0,234,236,9,0,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,238,1,
  	0,0,0,237,235,1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,240,241,5,42,0,
  	0,241,242,5,47,0,0,242,243,1,0,0,0,243,244,6,32,0,0,244,66,1,0,0,0,245,
  	247,7,1,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,
  	0,0,0,249,68,1,0,0,0,250,251,3,67,33,0,251,252,5,46,0,0,252,253,3,67,
  	33,0,253,70,1,0,0,0,254,265,5,61,0,0,255,256,5,126,0,0,256,265,5,61,0,
  	0,257,258,5,61,0,0,258,265,5,126,0,0,259,260,5,33,0,0,260,265,5,61,0,
  	0,261,262,5,33,0,0,262,265,5,126,0,0,263,265,5,126,0,0,264,254,1,0,0,
  	0,264,255,1,0,0,0,264,257,1,0,0,0,264,259,1,0,0,0,264,261,1,0,0,0,264,
  	263,1,0,0,0,265,72,1,0,0,0,266,267,5,33,0,0,267,74,1,0,0,0,268,270,7,
  	2,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,
  	272,76,1,0,0,0,273,279,7,3,0,0,274,278,8,3,0,0,275,276,5,92,0,0,276,278,
  	7,4,0,0,277,274,1,0,0,0,277,275,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,
  	0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,7,3,0,0,283,
  	78,1,0,0,0,284,290,5,34,0,0,285,289,8,4,0,0,286,287,5,92,0,0,287,289,
  	7,4,0,0,288,285,1,0,0,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,
  	0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,5,34,0,0,294,
  	80,1,0,0,0,295,299,7,5,0,0,296,298,7,2,0,0,297,296,1,0,0,0,298,301,1,
  	0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,82,1,0,0,0,301,299,1,0,0,0,
  	302,303,5,46,0,0,303,304,3,81,40,0,304,84,1,0,0,0,12,0,221,225,237,248,
  	264,271,277,279,288,290,299,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  overpasslexerLexerStaticData = staticData.release();
}

}

OverpassLexer::OverpassLexer(CharStream *input) : Lexer(input) {
  OverpassLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *overpasslexerLexerStaticData->atn, overpasslexerLexerStaticData->decisionToDFA, overpasslexerLexerStaticData->sharedContextCache);
}

OverpassLexer::~OverpassLexer() {
  delete _interpreter;
}

std::string OverpassLexer::getGrammarFileName() const {
  return "Overpass.g4";
}

const std::vector<std::string>& OverpassLexer::getRuleNames() const {
  return overpasslexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& OverpassLexer::getChannelNames() const {
  return overpasslexerLexerStaticData->channelNames;
}

const std::vector<std::string>& OverpassLexer::getModeNames() const {
  return overpasslexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& OverpassLexer::getVocabulary() const {
  return overpasslexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView OverpassLexer::getSerializedATN() const {
  return overpasslexerLexerStaticData->serializedATN;
}

const atn::ATN& OverpassLexer::getATN() const {
  return *overpasslexerLexerStaticData->atn;
}




void OverpassLexer::initialize() {
  std::call_once(overpasslexerLexerOnceFlag, overpasslexerLexerInitialize);
}
